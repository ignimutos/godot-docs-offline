name: Build Documents

env:
  TZ: UTC
  I10N_VERSION: 4.3
  DOC_VERSION: 4.3
  GH_TOKEN: ${{ github.token }}
  TARGET_LANGUAGE: ${{ vars.TARGET_LANGUAGE || 'zh_CN' }}

on:
  workflow_dispatch:
  schedule:
    - cron: "5 4 */7 * *"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      RUNNER-LABEL: ${{ steps.runner.outputs.LABEL }}
      MATRIX-LANGUAGES: ${{ steps.precheck.outputs.LANGS }}
    steps:
      - name: Choose runner
        id: runner
        run: |
          echo "LABEL=${{ vars.RUNNER_LABEL || 'ubuntu-latest' }}" >> $GITHUB_OUTPUT

      - name: Precheck
        id: precheck
        run: |
          mkdir version
          LANGS=()
          for lang in ${TARGET_LANGUAGE//,/ }; do
            if [[ "$lang" == 'zh_CN' ]]; then
              lang_weblate='zh_Hans'
            elif [[ "$lang" == 'zh_TW' ]]; then
              lang_weblate='zh_Hant'
            else
              lang_weblate=$lang
            fi
            version=$(curl -s "https://hosted.weblate.org/api/translations/godot-engine/godot-docs/$lang_weblate/statistics/" | jq -r '.last_change')
            last_version=$(curl -s "https://raw.githubusercontent.com/ignimutos/godot-docs-offline/$DOC_VERSION/version/$lang")
            if [[ "$last_version" == '404*' ]]; then
              last_version='1970-01-01T00:00:00+0000'
            fi
            if [[ $(date -d "$last_version" '+%s') == $(date -d "$version" '+%s') ]]; then
              echo "language $lang no update detected"
            else  
              echo "$lang: $last_version -> $version"
              echo $version > version/$lang
              LANGS+=($lang)
            fi
          done

          JSON=$(jq -c -n '$ARGS.positional' --args "${LANGS[@]}")
          echo "LANGS=$JSON"
          echo "LANGS=$JSON" >> $GITHUB_OUTPUT

      - name: Upload version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: |
            version/*

  build:
    needs: setup
    runs-on: ${{ needs.setup.outputs.RUNNER-LABEL }}
    permissions:
      contents: write
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        language: ${{ fromJSON(needs.setup.outputs.MATRIX-LANGUAGES) }}
    env:
      READTHEDOCS_LANGUAGE: ${{ matrix.language }}
    steps:
      - name: Checkout l10n
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot-docs-l10n
          ref: ${{ env.I10N_VERSION }}

      - name: Checkout Doc
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot-docs
          ref: ${{ env.DOC_VERSION }}
          path: docs

      - name: Copy zh_CN class reference translate
        if: ${{ env.READTHEDOCS_LANGUAGE == 'zh_CN' }}
        run: |
          cp -rf classes/zh_CN/* docs/classes/

      - name: Get Python version
        id: pythonv
        run: |
          echo "PYTHON_VERSION=$(python3 --version)" >> $GITHUB_OUTPUT

      - name: Restore cached virtualenv
        id: restore_cache
        uses: actions/cache/restore@v4
        with:
          key: venv-${{ needs.setup.outputs.RUNNER-LABEL }}-${{ steps.pythonv.outputs.PYTHON_VERSION }}-${{ hashFiles('docs/requirements.txt') }}
          path: docs/.venv

      - name: Install dependencies
        run: |
          cd docs
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install setuptools
          python3 -m pip install -r requirements.txt
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y parallel libwebp7 imagemagick zip

      - name: Save virtualenv cache
        if: steps.restore_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: venv-${{ needs.setup.outputs.RUNNER-LABEL }}-${{ steps.pythonv.outputs.PYTHON_VERSION }}-${{ hashFiles('docs/requirements.txt') }}
          path: docs/.venv

      - name: Sphinx - Build html
        run: |
          mkdir artifact
          cd docs
          make SPHINXOPTS='--color -j 8' html
          cd _build/html
          zip -qr GodotEngine-$READTHEDOCS_LANGUAGE.zip . -x '.venv/*'
          mv GodotEngine-$READTHEDOCS_LANGUAGE.zip ../../../artifact/

      - name: Sphinx - Build epub
        run: |
          cd docs
          # Convert WebP images to PNG and replace references, so that ePub readers can display those images.
          # The ePub 3.0 specification has WebP support, but it's not widely supported by apps and e-readers yet.
          shopt -s globstar nullglob
          parallel --will-cite convert {} {.}.png ::: {about,community,contributing,getting_started,img,tutorials}/**/*.webp
          parallel --will-cite sed -i "s/\\.webp$/\\.png/g" ::: {about,community,contributing,getting_started,tutorials}/**/*.rst

          # Remove banners at the top of each page when building `latest`.
          sed -i 's/"godot_is_latest": True/"godot_is_latest": False/' conf.py
          sed -i 's/"godot_show_article_status": True/"godot_show_article_status": False/' conf.py

          make SPHINXOPTS='--color -j 8' epub
          mv _build/epub/GodotEngine.epub ../artifact/GodotEngine-$READTHEDOCS_LANGUAGE.epub

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.READTHEDOCS_LANGUAGE }}
          path: |
            artifact/*

  update:
    runs-on: ubuntu-latest
    needs: [setup, build]
    permissions:
      contents: write
    steps:
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: build
          merge-multiple: true

      - name: Display structure of build files
        run: ls -R

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Override version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: repo/version

      - name: Generate update info
        run: |
          cat << EOF > release_body.md
          # Translate changelog
          $(echo '')
          | Language | LastUpdate |
          | :------- | :-------- |
          EOF

          for file in repo/version/*; do
            name=${file##*/}
            content=$(date -d $(cat $file) '+%Y-%m-%d %H:%M:%S')
            echo "| $name | $content |" >> release_body.md
          done

      - name: Add Tag
        run: |
          cd repo
          if ! git ls-remote --tags origin | grep -q "refs/tags/$DOC_VERSION"; then
            git tag $DOC_VERSION
            git push --tag
          fi

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.DOC_VERSION }}
          body_path: release_body.md
          files: "build/*"

      - name: Update repository version
        run: |
          cd repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump translate version"
          git push
